ifneq ($(wildcard ./.env),)
# $(info Loading environment variables from .env)
include ./.env
endif

YARN ?= $(shell command -v yarn || { \
		echo 'ERROR: yarn must be installed globally to $$PATH to build this app'; \
		exit 1; \
	})
ifneq (,$(findstring ERROR:,$(YARN)))
$(error $(YARN))
endif

NODE ?= $(shell nvm which $(cat .nvmrc) 2>/dev/null || \
	command -v node || \
	{ \
		echo 'ERROR: node or nvm must be installed an in $$PATH to build this app'; \
		exit 1; \
	})
ifneq (,$(findstring ERROR:,$(NODE)))
$(error $(NODE))
endif

NODE_MODULES     :=./node_modules
NODE_MODULES_BIN :=$(NODE_MODULES)/.bin
JSPM_PACKAGES    :=./static/jspm

TSC 	?=$(NODE) $(NODE_MODULES_BIN)/tsc
TSLINT  ?=$(NODE) $(NODE_MODULES_BIN)/tslint
NODEMON ?=$(NODE) $(NODE_MODULES_BIN)/nodemon
JSPM    ?=$(NODE) $(NODE_MODULES_BIN)/jspm

YARN_FLAGS 	  ?=
NODE_FLAGS    ?=
TSC_FLAGS	  ?=
TSLINT_FLAGS  ?=--format verbose $(shell [ ! -z "$(FIX)" -a "$(FIX)" != "0" ] && echo "--fix")
NODEMON_FLAGS ?=--delay 0.5 --quiet --watch .env --watch index.js --watch dist --exec make start

SERVER_SRCS :=$(wildcard server/*.ts) $(wildcard server/*/*.ts) $(wildcard common/*.ts)
SERVER_OUTS :=$(addprefix dist/,$(SERVER_SRCS:.ts=.js))

CLIENT_SRCS :=$(wildcard client/*.ts) $(wildcard client/*/*.ts) $(wildcard common/*.ts)
CLIENT_OUTS :=$(addprefix static/js/,$(CLIENT_SRCS:.ts=.js))

.PHONY: all clean clean-modules install-yarn install-jspm pre-deps deps
.PHONY: build build-server build-client watch watch-server start start-watch

all: build lint

# Removes all files generated by the build (except node_modules)
clean:
	@echo "==> Removing build files"
	rm -rf dist static/js

clean-deps: clean
	@echo "==> Removing installed dependencies"
	rm -rf node_modules static/jspm

install-yarn:
	@echo "==> Installing node_modules with yarn"
	$(YARN) $(YARN_FLAGS) install

install-jspm: $(NODE_MODULES)
	@echo "==> Installing jspm packages with jspm"
	$(JSPM) install

pre-deps:
	@echo "==> (Re-)installing all application dependencies"

deps: pre-deps install-yarn install-jspm

# Target to install node_modules if depended upon by other targets
$(NODE_MODULES): package.json yarn.lock
	@[ -e "$(NODE_MODULES)" ] || (echo "==> $(NODE_MODULES) not found!" && make install-yarn)

# Target to install jspm packages if depended upon by other targets
$(JSPM_PACKAGES): package.json
	@[ -e "$(JSPM_PACKAGES)" ] || (echo "==> $(JSPM_PACKAGES) not found!" && make install-jspm)

pre-build:
	@echo "==> Building tutor-match"

# Builds the entire app (excluding docker containers)
build: pre-build build-server build-client
	@echo "==> Built tutor-match"

# Builds the server code (using typescript)
build-server: $(SERVER_OUTS)

$(SERVER_OUTS:.js=%js): $(NODE_MODULES) server/tsconfig.json $(SERVER_SRCS)
	@echo "==> Building server"
	$(TSC) $(TSC_FLAGS) --project server

# Builds the client code (using typescript)
build-client: $(CLIENT_OUTS)

$(CLIENT_OUTS:.js=%js): $(NODE_MODULES) $(JSPM_PACKAGES) client/tsconfig.json $(CLIENT_SRCS)
	@echo "==> Building client"
	$(TSC) $(TSC_FLAGS) --project client

watch:
	@echo "==> Watching all files for changes"
	@scripts/parallel.sh "make watch-server" "make watch-client"

watch-server: $(NODE_MODULES)
	@echo "==> Watching server for changes"
	$(TSC) $(TSC_FLAGS) --project server --watch

watch-client: $(NODE_MODULES) $(JSPM_PACKAGES)
	@echo "==> Watching client for changes"
	$(TSC) $(TSC_FLAGS) --project client --watch

start:
# only build if not running on now.sh, and if in development
	@! [ "$$NOW" != "1" -a "$$NODE_ENV" == "development" ] || make build
	$(NODE) $(NODE_FLAGS) .

start-watch:
	@echo "==> Restarting tutor-match on every rebuild"
	@scripts/parallel.sh 'make watch' '$(NODEMON) $(NODEMON_FLAGS)'

# Lints everything
# Run with FIX=1 to automaticall fix some lint errors
lint: lint-server lint-client

lint-server: $(NODE_MODULES)
	@echo "==> Linting server"
	$(TSLINT) $(TSLINT_FLAGS) --project server

lint-client: $(NODE_MODULES)
	@echo "==> Linting client"
	$(TSLINT) $(TSLINT_FLAGS) --project client --exclude client/jspm.config.js
