YARN ?= $(shell command -v yarn || { \
		echo 'ERROR: yarn must be installed globally to $$PATH to build this app'; \
		exit 1; \
	})
ifneq (,$(findstring ERROR:,$(YARN)))
$(error $(YARN))
endif

NODE ?= $(shell nvm which $(cat .nvmrc) 2>/dev/null || \
	command -v node || \
	{ \
		echo 'ERROR: node or nvm must be installed an in $$PATH to build this app'; \
		exit 1; \
	})
ifneq (,$(findstring ERROR:,$(NODE)))
$(error $(NODE))
endif


NODE_MODULES_BIN := ./node_modules/.bin
TSC 	?= $(NODE) $(NODE_MODULES_BIN)/tsc
TSLINT  ?= $(NODE) $(NODE_MODULES_BIN)/tslint
NODEMON ?= $(NODE) $(NODE_MODULES_BIN)/nodemon

YARN_FLAGS 	  ?=
NODE_FLAGS    ?=
TSC_FLAGS	  ?=
TSLINT_FLAGS  ?= --format verbose
NODEMON_FLAGS ?= -x $(NODE) --delay 0.5 $(NODE_FLAGS)

SERVER_SRCS := $(wildcard server/*.ts) $(wildcard server/*/*.ts)
SERVER_OUTS := $(subst server/,dist/,$(SERVER_SRCS:.ts=.js))

.PHONY: all clean clean-modules install-modules build build-server watch watch-server start start-watch

all: build lint

# Removes all files generated by the build (except node_modules)
clean:
	rm -rf dist static/js

clean-modules: clean
	rm -rf node_modules static/jspm

# Installs all dependencies
install-modules: package.json yarn.lock
	$(YARN) $(YARN_FLAGS) install

# Target to install node_modules if depended upon by other targets
node_modules: package.json
	[ -e node_modules ] || make install-modules

build: build-server

# Builds the server code (using typescript)
build-server: $(SERVER_OUTS)

$(SERVER_OUTS:.js=%js): node_modules server/tsconfig.json $(SERVER_SRCS)
	$(TSC) $(TSC_FLAGS) --project server

watch: watch-server

watch-server: node_modules
	$(TSC) $(TSC_FLAGS) --project server --watch

start:
# only build if not running on now.sh, and if in development
	@! [ "$$NOW" != "1" -a "$$NODE_ENV" == "development" ] || make build
	@echo "==> Starting tutor-match\n"
	$(NODE) $(NODE_FLAGS) .

start-watch:
	scripts/parallel.sh "make watch-server" "$(NODEMON) $(NODEMON_FLAGS) ."

lint: $(SERVER_SRCS) node_modules
	$(TSLINT) $(TSLINT_FLAGS) --project server

lint-fix: $(SERVER_SRCS) node_modules
	TSLINT_FLAGS="$(TSLINT_FLAGS) --fix" make lint

# Builds the entire app (excluding docker containers)
build: build-server
